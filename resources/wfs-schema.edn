{:objects
   {:Recipe
      {:description "A meal that can be made."
       :fields
         {:id {:type (non-null Int)}
          :name {:type (non-null String)}
          :description
            {:type String
             :description "A markdown description or instructions."}
          :image {:type String
                  :description "A preview image of the recipe."}}}
    :User
      {:description "A user of the wfs app."
       :fields
         {:username {:type (non-null String)}
          :name {:type (non-null String)}
          :recipes
            {:type (non-null (list (non-null :Recipe)))
             :description "Recipes in this user's library."
             :resolve :User/recipes}
          :sessions
            {:type (non-null (list (non-null :Session)))
             :description
               "A list of the sessions in which the user is currently able to participate."
             :resolve :User/sessions}}}
    :Session
      {:description "A recipe selection session between users"
       :fields
         {:id {:type (non-null Int)}
          :users
            {:type (non-null (list (non-null :User)))
             :resolve :Session/users
             :description
               "The users participating in the session currently."}
          :expires
            {:type (non-null String)
             :description
               "The serialized java.time Instant when this session will expire."}
          :recipes-connection
            {:type (non-null :RecipesConnection)
             :resolve :Session/recipes-connection
             :args
               {:first
                  {:type (non-null Int)
                   :description
                     "The number of recipes to return at most."}
                :after
                  {:type String
                   :description
                     "A cursor to the last recipe before the recipes desired."}}}}}
    :RecipesConnection
      {:description "A Connection to a list of recipes in a session."
       :fields
         {:page-info {:type (non-null :PageInfo)}
          :edges {:type (non-null (list (non-null :RecipeEdge)))}}}
    :RecipeEdge
      {:fields
         {:node {:type (non-null :Recipe)}
          :cursor {:type String}
          :liked-by {:type (non-null (list (non-null :User)))}
          :disliked-by {:type (non-null (list (non-null :User)))}}}
    :PageInfo
      {:fields
         {:has-previous-page {:type (non-null Boolean)}
          :has-next-page
            {:type (non-null Boolean)
             :description "There is a page available after this page."}
          :start-cursor
            {:type (non-null ID)
             :description "A cursor to the first edge of this page."}
          :end-cursor
            {:type (non-null ID)
             :description "A cursor to the last edge of this page."}}}
    :Invite {:fields {:from {:type (non-null String)}
                      :session {:type (non-null :Session)}}}}
 :queries
   {:recipe
      {:type :Recipe
       :description "Access a recipe by it's unique id, if it exists."
       :args {:id {:type (non-null Int)}}
       :resolve :query/recipe-by-id}
    :user
      {:type :User
       :description
         "Select a user by their username, if they exist.

If the id is empty uses auth information to get the current user"
       :args {:id {:type String}}
       :resolve :query/user-by-id}
    :session
      {:type :Session
       :description "Select a Session by it's unique id, if it exists."
       :args {:id {:type (non-null Int)}}
       :resolve :query/session-by-id}}
 :subscriptions
   {:invites {:type :Invite
              :args {:claim {:type String}} ; TODO claim through auth headers
              :stream :stream/invites}}
 :mutations
   {:yoink-recipe
      {:type :Recipe
       :description
         "Adds a recipe to a user's library if not already added.

   On success (the user and recipe both exist) selects the Recipe.
   Otherwise selects nil and an error."
       :args
         {:user-id {:type (non-null Int)}
          :recipe-id {:type (non-null Int)}}
       :resolve :mutation/yoink-recipe}
    :rate-recipe
      {:type :Recipe
       :description
         "Assigns a per user rating to a recipe.

   On success (the user and recipe both exist, and the user saved the recipe) selects the Recipe.
   Otherwise selects nil and an error."
       :args
         {:user-id {:type (non-null Int)}
          :recipe-id {:type (non-null Int)}
          :rating
            {:type Int
             :description
               "Rating for this recipe as an integer between 1 and 5 inclusive. nil clears the rating."}}
       :resolve :mutation/rate-recipe}
    :start-session
      {:type :Session
       :args {:initial-users
                {:type (list (non-null String))
                 :description "The users to initially invite to the session."}}
       :resolve :mutation/start-session}
    :session-inv-users
      {:type :Session
       :args {:session {:type (non-null Int)
                        :description "The id of the session to modify"}
              :users
                {:type (non-null (list (non-null String)))
                 :description "The users to invite to the session."}}
       :resolve :mutation/session-inv}}}
